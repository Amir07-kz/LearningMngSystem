<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
{#    <title>Details of Slide #{{ slide.slide_number }}kdfhmdfndgn xd</title>#}
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <style>
        /**{*/
        /*    background: #f0f0f0;*/
        /*}*/

        .course-container {
            font-family: 'Arial', sans-serif;
            background-color: #f0f0f0;
            display: flex;
            height: 100vh;
        }

        .course-header {
            background-color: #93c0f8;
            color: black;
            padding: 3px 3px;
            display: flex;
            align-items: center;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            box-sizing: border-box;
            z-index: 1000;
        }

        .lessons-container {
            display: flex;
            width: 100%;
            padding-top: 50px;
        }

        .lesson-list {
            background-color: white;
            width: 25%;
            margin-top: 5px;
        }

        .lesson-item {
            border-bottom: 1px solid #ddd;
            padding: 10px 10px;
            list-style: none;
        }

        .lesson-item:last-child {
            border-bottom: none;
        }

        .lesson-item a {
            text-decoration: none;
            color: black;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .lesson-item a:hover {
            background-color: #f0f0f0;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }

        .modal-content {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #fefefe;
            padding: 20px;
            border: 1px solid #888;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
            width: 300px;
            height: auto;
            max-width: 600px;
            max-height: 90vh;
        }

        .content {
            flex-grow: 1;
            padding-left: 20%;
            margin-top: 2%;
        }

        .dropdown {
            position: relative;
            display: inline-block;
        }

        .dropdown-menu {
            display: none;
        }

        .show {
            display: block;
        }

        .content-actions {
            display: flex;
            justify-content: space-around;
            margin-bottom: 10px;
        }

        .content-actions button {
            background: #fff;
            border: 1px solid #ccc;
            padding: 5px 10px;
            cursor: pointer;
        }

        .content-actions button:hover {
            background: #f0f0f0;
        }

        #imagePreviewContainer {
            display: none;
            max-width: 100%;
            overflow: hidden;
        }

        #FilePreview {
            width: 20%;
            height: auto;
        }

        .slide-image {
            width: 40%;
            height: 40%;
            object-fit: cover;
        }
        .file-container {
            margin-top: 10px;
        }
        .description-container {
            display: flex;
            align-items: flex-start;
        }

        .api-response {
            margin-right: 20px;
            padding: 10px;
            background-color: #f0f0f0;
            color: gray;
        }

        .exit {
            margin-top: 20px;
            padding-left: 35%;
        }

        .question {
            padding: 2.5%;
        }

        .loading {
            color: #000;
            background: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border-radius: 5px;
            position: relative;
        }

        .correct-answer {
            background-color: lightgreen;
        }

        .wrong-answer {
            background-color: salmon;
        }

        #filePreview {
            width: 20%;
            height: auto;
        }

        .api-response {
            max-width: 500px;
            max-height: 200px;
            overflow-x: auto;
            overflow-y: auto;
            word-wrap: break-word;
            white-space: pre-wrap;
            padding: 10px;
        }

        .description-block {
            display: flex;
            align-items: center;
        }

        .video-content {
            margin-left: 20%;
        }

    </style>
</head>
<body>
<div class="course-container">
    <div class="course-header">
        <a href="{{ route('courses_list') }}"><-</a>
        <h1>{{ slides[0].course.title }}</h1>
    </div>
    <div class="lessons-container">
        <div class="lesson-list">
            <h2>Слайды</h2>
            <ul>
                {% for slideItem in slides %}
                    <li class="lesson-item">
                        <a href="/courses/{{ courseId }}/slide/{{ slideItem.slide_number }}">
                            <span class="lesson-title">{{ slideItem.title }}</span>
                            {% if is_admin %}
                                <form action="{{ route('slide.remove', {'course': courseId, 'slide': slideItem.slide_number}) }}" method="post">
                                    {{ csrf_field() }}
                                    <button class="icon-duplicate">Удалить</button>
                                    <input type="hidden" name="_method" value="DELETE">
                                </form>
                            {% endif %}
                        </a>
                    </li>
                {% endfor %}
                {% if is_admin %}
                    <div class="dropdown">
                        <div class="dropdown-menu">
                            <button class="dropdown-toggle">+</button>
                        </div>
                    </div>
                    <li class="lesson-item">
                        <a class="add_slide" style="color: gray">Добавить слайд</a>
                    </li>
                {% else %}
                    <div class="exit">
                        <a>Завершить курс</a>
                    </div>
                {% endif %}
            </ul>
        </div>
        <div id="myModal" class="modal" style="display: none;">
            <div class="modal-content">
            </div>
        </div>
        <div class="content">
            <br>
            {% if is_admin and slide is defined %}
                <form action="{{ route('slide.update', {'course': courseId, 'slide': slide.slide_number}) }}" method="post" enctype="multipart/form-data">
                    {{ csrf_field() }}
                    <div style="margin-top: 3%">
                        <label for="title">Название слайда:</label>
                        <input type="text" id="title" name="title" required value="{{ slide.title }}">
                    </div>
                    <div id="textContainer">
                        {% for description in slide.descriptions %}
                            <div class="description-block">
                                <label for="description_{{ description.id }}">Описание: </label>
                                <textarea id="description_{{ description.id }}" name="descriptions[{{ description.id }}]">{{ description.description }}</textarea>
                                {% if is_admin %}
                                    <button type="button" class="delete-button" data-description-id="{{ description.id }}">Удалить</button>
                                {% endif %}
                                <button type="button" class="ai-button" data-description-id="{{ description.id }}">AI</button>
                                <div class="video-content" id="video-content-{{ description.id }}"></div>
                            </div>
                            <div class="api-response" id="api-response-{{ description.id }}"></div>
                            <div id="loading-{{ description.id }}" class="loading" style="display: none; margin-left: 10%">Загрузка...</div>
                        {% endfor %}
                        {% for mediaFile in slide.mediaFiles %}
                            {% if mediaFile.file_type starts with 'image' %}
                                <div class="image-container">
                                    <img class="slide-image" src="{{ asset('storage/' ~ mediaFile.file_path) }}" alt="Media Image">
                                    {% if is_admin %}
                                        <button type="button" class="delete-media-button" data-id="{{ mediaFile.id }}">Удалить</button>
                                    {% endif %}
                                </div>
                            {% endif %}
                        {% endfor %}
                        <div class="quiz-section">
                            {% for question in slide.questions %}
{#                                {{ dump(question.id) }}#}
                                <a>Тема :</a> {{ question.theme }}
                                <div class="question">
                                    <input type="hidden" name="questions[{{ question.id }}][id]" value="{{ question.id }}">
                                    <input class="question" type="text" name="questions[{{ question.id }}][text]" value="{{ question.text }}">
                                    {% if is_admin %}
                                        <button type="button" class="delete-question" data-question-id="{{ question.id }}">Удалить вопрос</button>
                                    {% endif %}
                                    {% for answer in question.answers %}
                                        <div class="answer" data-is-correct="{{ answer.is_correct }}">
                                            <input type="text" name="questions[{{ question.id }}][answers][{{ answer.id }}][text]" value="{{ answer.text }}">
                                            <input type="checkbox" name="correct_answers[{{ question.id }}][]" value="{{ answer.id }}" {% if answer.is_correct %} checked {% endif %}>
                                            {% if is_admin %}
                                                <button type="button" class="delete-answer">Удалить ответ</button>
                                            {% endif %}
                                        </div>
                                    {% endfor %}
                                    <button type="button" class="show-answer">Узнать ответ</button> {# робит перенести для польз #}
                                    {% if is_admin %}
                                        <button type="button" onclick="addAnswer(this)">Добавить ответ</button>
                                    {% endif %}
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                    {% if is_admin %}
                        <button type="button" id="addSectionButton">+ Добавить новую секцию</button>
                    {% endif %}
                    <div id="sectionContainer"></div>
                    <div class="content-actions" id="contentActions" style="display: none;">
                        <button type="button" id="addTextButton">Текст</button>
                        <button type="button" id="addFileButton">Файл</button>
                        <button type="button" id="addTestButton">Тест</button>
                    </div>
                    <div>
                        <label style="display: none" for="fileUpload">Загрузка файла:</label>
                        <input style="display: none" type="file" id="fileUpload" name="file" accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,image/*,video/*,audio/*" onchange="previewImage(this);">
                        <div id="filePreviewContainer">
                            <img id="filePreview" src="" alt="File Preview" style="display: none;">
                        </div>
                    </div>
                    <div class="quiz-add-section" style="display: none;">
                        <h2>Создание тестового вопроса</h2>
                        <div>
                            <label for="question">Тема теста: </label>
                            <input type="text" id="theme" name="question_theme">
                            <br>
                            <label for="question">Вопрос: </label>
                            <input type="text" id="question" name="question_text">
                        </div>
                        <div class="answers">
                            {% for answer in question.answers %}
                                <div class="answer">
                                    <input type="text" name="answers[{{ question.id }}][{{ answer.id }}][text]" value="{{ answer.text }}">
                                    <input type="checkbox" name="correct_answers[{{ question.id }}][{{ answer.id }}]"
                                           value="{{ answer.id }}" {% if answer.is_correct %} checked {% endif %}>
                                    Mark
                                </div>
                            {% endfor %}
                        </div>
                        <button type="button" id="addAnswerButton">Добавить ответ</button>
                    </div>
                    {% if is_admin %}
                        <button type="submit">Обновить слайд</button>
                    {% endif %}
                </form>
            {% endif %}
            {% if not is_admin %}
                {% for description in slide.descriptions %}
                    <div class="description-block">
                        <label for="description_{{ description.id }}">Описание: </label>
                        <textarea id="description_{{ description.id }}" name="descriptions[{{ description.id }}]">{{ description.description }}</textarea>
                        {% if is_admin %}
                            <button type="button" class="delete-button" data-description-id="{{ description.id }}">Удалить</button>
                            <button type="button" class="ai-button" data-description-id="{{ description.id }}">AI</button>
                        {% endif %}
                        <div class="video-content" id="video-content-{{ description.id }}"></div>
                    </div>
                    <div class="api-response" id="api-response-{{ description.id }}"></div>
                    <div id="loading-{{ description.id }}" class="loading" style="display: none; margin-left: 10%">Загрузка...</div>
                {% endfor %}
{#                {% for mediaFile in slide.mediaFiles %}#}
{#                    {% if mediaFile.file_type starts with 'image' %}#}
{#                        <div class="file-container">#}
{#                            <img class="slide-image" src="{{ asset('storage/' ~ mediaFile.file_path) }}" alt="Media Image">#}
{#                            {% if is_admin %}#}
{#                                <button type="button" class="delete-media-button" data-id="{{ mediaFile.id }}">Удалить</button>#}
{#                            {% endif %}#}
{#                        </div>#}
{#                    {% endif %}#}
{#                {% endfor %}#}
                {% for mediaFile in slide.mediaFiles %}
                    {% if mediaFile.file_type starts with 'image' %}
                        <div class="file-container">
                            <img class="slide-image" src="{{ asset('storage/' ~ mediaFile.file_path) }}" alt="Media Image">
                            {% if is_admin %}
                                <button type="button" class="delete-media-button" data-id="{{ mediaFile.id }}">Удалить</button>
                            {% endif %}
                        </div>
                        {% elseif mediaFile.file_type starts with 'video' %}
                        <div class="file-container">
                            <video width="320" height="240" controls>
                                <source src="{{ asset('storage/' ~ mediaFile.file_path) }}" type="{{ mediaFile.file_type }}">
                                Ваш браузер не поддерживает видео тег.
                            </video>
                            {% if is_admin %}
                                <button type="button" class="delete-media-button" data-id="{{ mediaFile.id }}">Удалить</button>
                            {% endif %}
                        </div>
                        {% elseif mediaFile.file_type starts with 'audio' %}
                        <div class="file-container">
                            <audio controls>
                                <source src="{{ asset('storage/' ~ mediaFile.file_path) }}" type="{{ mediaFile.file_type }}">
                                Ваш браузер не поддерживает аудио тег.
                            </audio>
                            {% if is_admin %}
                                <button type="button" class="delete-media-button" data-id="{{ mediaFile.id }}">Удалить</button>
                            {% endif %}
                        </div>
                    {% else %}
                        <div class="file-container">
                            <a href="{{ asset('storage/' ~ mediaFile.file_path) }}" download>{{ mediaFile.file_name }}</a>
                            {% if is_admin %}
                                <button type="button" class="delete-media-button" data-id="{{ mediaFile.id }}">Удалить</button>
                            {% endif %}
                        </div>
                    {% endif %}
                {% endfor %}
                <form id="answerForm" method="post" action="{{ route('save.answers') }}">
                    <input type="hidden" name="_token" value="{{ csrf_token() }}">
                    <input type="hidden" name="submissionToken" value="{{ submissionToken }}">
                    {% for question in slide.questions %}
                        <div class="user-question">
                            <p>{{ question.text }}</p>
                            {% for answer in question.answers %}
                                {% set answerClass = '' %}
                                {% if question.userAnswer %}
                                    {% if answer.id == question.userAnswer.answer_id %}
                                        {% set answerClass = answer.is_correct ? 'correct-answer' : 'wrong-answer' %}
                                    {% endif %}
                                {% endif %}
                                <div class="{{ answerClass }}">
                                    <input type="checkbox" name="answers[{{ question.id }}][]" value="{{ answer.id }}" id="answer{{ answer.id }}">
                                    <label for="answer{{ answer.id }}">{{ answer.text }}</label>
                                </div>
                            {% endfor %}
                        </div>
                    {% endfor %}
{#                    {% if showSubmitButton %}#}
{#                        {% if not slide.questions|length == 0 %}#}
{#                            <button type="submit">Отправить ответ(-ы)</button>#}
{#                        {% endif %}#}
{#                    {% endif %}#}
                </form>
{#                <button type="button" class="show-answer">Узнать ответ</button> #}{# робит перенести для польз #}
            {% endif %}
            {% for description in slide.descriptions %}
                <form action="{{ route('slide.content.remove', {'course': courseId, 'slide': slide.slide_number, 'descriptionId': description.id}) }}" method="post" style="display: none;">
                    {{ csrf_field() }}
                    <input type="hidden" name="_method" value="DELETE">
                </form>
            {% endfor %}
            <div id="testContainer"></div>
{#            <button onclick="generateTest()">Сгенерировать тест</button>#}
            {% if not slide.questions|length == 0 and not is_admin%} {# Мб оставить для того чтобы админ сам мог генерировать тестовые задания #}
                <div class="question">
                    <div class="question-theme">{{ question.theme }}</div>
                    <button type="button" class="ai-generator" data-description-id="{{ description.id }}">Дополнительные тестовые задания</button>
                    <div id="loading_{{ description.id }}" class="loading" style="display: none; margin-left: 10%">Загрузка...</div>
                </div>
            {% endif %}
            <div class="generated-test"></div>
        </div>
    </div>
</div>
</body>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const answerButtons = document.querySelectorAll('.show-answer');
        answerButtons.forEach(button => {
            button.addEventListener('click', function () {
                const answers = this.parentNode.querySelectorAll('.answer');
                answers.forEach(answer => {
                    const isCorrect = answer.getAttribute('data-is-correct');
                    if (isCorrect === '1') {
                        answer.style.backgroundColor = 'lightgreen';
                    }
                });
            });
        });
    });

    // document.addEventListener('DOMContentLoaded', function() {
    //     const form = document.querySelector('form');
    //     form.addEventListener('submit', function(event) {
    //         event.preventDefault();
    //         const formData = new FormData(form);
    //
    //         fetch(form.action, {
    //             method: 'POST',
    //             body: formData,
    //             headers: {
    //                 'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    //             }
    //         })
    //             .then(response => {
    //                 if (!response.ok) {
    //                     throw new Error('Network response was not ok: ' + response.statusText);
    //                 }
    //                 return response.json();
    //             })
    //             .then(data => {
    //                 console.log('Success:', data);
    //                 alert('Ответы успешно сохранены!');
    //             })
    //             .catch(error => {
    //                 console.error('Error:', error);
    //                 alert('Ошибка при отправке ответов: ' + error.message);
    //             });
    //     });
    // });


    document.addEventListener('DOMContentLoaded', function () {
        const checkboxes = document.querySelectorAll('input[type="checkbox"]');

        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                // Удаляем класс checked у всех чекбоксов
                checkboxes.forEach(cb => {
                    cb.parentElement.classList.remove('checked');
                });

                // Если чекбокс выбран, добавляем класс checked его родительскому элементу
                if (this.checked) {
                    this.parentElement.classList.add('checked');
                }
            });
        });
    });

    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('answerForm');

        form.addEventListener('submit', function(event) {
            event.preventDefault();
            if (form.classList.contains('is-submitting')) {
                console.log('Preventing duplicate submissions');
                return; // Предотвратить повторную отправку
            }

            form.classList.add('is-submitting');
            const formData = new FormData(form);

            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Success:', data);
                    alert('Ответы успешно сохранены!');
                    form.classList.remove('is-submitting');
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Ошибка при отправке ответов: ' + error.message);
                    form.classList.remove('is-submitting');
                });
        });
    });
//

    document.addEventListener('DOMContentLoaded', function() {
        const textareas = document.querySelectorAll('textarea');

        function autoResize() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        }

        textareas.forEach(textarea => {
            textarea.addEventListener('input', autoResize, false);
            autoResize.call(textarea);
        });
    });

    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.delete-question').forEach(button => {
            button.addEventListener('click', function() {
                if (!confirm('Вы уверены, что хотите удалить этот вопрос?')) {
                    return;
                }

                var questionId = this.dataset.questionId;

                fetch(`/questions/${questionId}`, {
                    method: 'DELETE',
                    headers: {
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    }
                }).then(response => {
                    if (response.ok) {
                        return response.text();
                    }
                    throw new Error('Ошибка при удалении вопроса.');
                }).then(() => {
                    this.closest('.question').remove();
                }).catch(error => console.error('Error:', error));
            });
        });
    });

    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.ai-button').forEach(button => {
            button.addEventListener('click', function() {
                const descriptionId = this.getAttribute('data-description-id');
                const descriptionElement = document.querySelector('#description_' + descriptionId);
                const videoContentElement = document.querySelector('#video-content-' + descriptionId);
                const apiResponseElement = document.querySelector('#api-response-' + descriptionId);
                const loadingElement = document.querySelector('#loading-' + descriptionId);
                const descriptionText = descriptionElement.value;

                loadingElement.style.display = 'inline-block';
                apiResponseElement.textContent = '';

                fetch('/api/send-youtube', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    },
                    body: JSON.stringify({ searchQuery: descriptionText })
                })
                    .then(response => response.json())
                    .then(data => {
                        setTimeout(() => {  // Задержка перед отображением результатов
                            if (data.videos && data.videos.length > 0) {
                                videoContentElement.innerHTML = `<iframe width="350" height="200" src="https://www.youtube.com/embed/${data.videos[0].videoId}" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>`;
                            } else {
                                apiResponseElement.textContent = 'Видео не найдено.';
                            }
                            loadingElement.style.display = 'none';
                        }, 10000);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        apiResponseElement.textContent = "Видео не найдено";
                        loadingElement.style.display = 'none';
                    });
            });
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.ai-button').forEach(button => {
            button.addEventListener('click', function () {
                const descriptionId = this.getAttribute('data-description-id');
                const descriptionElement = document.querySelector('#description_' + descriptionId);
                const apiResponseElement = document.querySelector('#api-response-' + descriptionId);
                const loadingElement = document.querySelector('#loading-' + descriptionId);
                const promt = " \n";// Как можно дополнить этот текст
                const descriptionText = promt + descriptionElement.value;


                loadingElement.style.display = 'inline-block';
                apiResponseElement.textContent = '';

                fetch('/api/send-request', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    },
                    body: JSON.stringify({ text: descriptionText })
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.text) {
                            apiResponseElement.textContent = data.text;
                        }

                        loadingElement.style.display = 'none';
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        apiResponseElement.textContent = "Error: " + error.message;
                        loadingElement.style.display = 'none';
                    });
            });
        });
    });


    document.addEventListener('DOMContentLoaded', function() {
        var addQuizButton = document.getElementById('addTestButton');
        console.log(addQuizButton)
        var quizSection = document.querySelector('.quiz-add-section');

        if (addQuizButton && quizSection) {
            addQuizButton.addEventListener('click', function() {
                quizSection.style.display = quizSection.style.display === 'none' ? 'block' : 'none';
            });
        } else {
            console.error('Element not found');
        }
    });

    document.addEventListener('DOMContentLoaded', function() {
        document.body.addEventListener('click', function(event) {
            if (event.target.classList.contains('delete-answer')) {
                const answerDiv = event.target.closest('.answer');
                if (answerDiv) {
                    answerDiv.remove();
                }
            }
        });
    });

    document.addEventListener('DOMContentLoaded', function() {
        document.body.addEventListener('click', function(event) {
            if (event.target.classList.contains('delete-question')) {
                const questionDiv = event.target.closest('.question');
                if (questionDiv) {
                    questionDiv.remove();
                }
            }
        });
    });

    document.addEventListener('DOMContentLoaded', function() {
        var addAnswerBtn = document.getElementById('addAnswerButton');
        var answersDiv = document.querySelector('.answers');

        addAnswerBtn.addEventListener('click', function() {
            var newAnswer = document.createElement('div');
            newAnswer.classList.add('answer');

            var answerInput = document.createElement('input');
            answerInput.type = 'text';
            answerInput.name = 'answers[]';
            answerInput.placeholder = 'Вариант ответа ';

            var correctAnswerCheckbox = document.createElement('input');
            correctAnswerCheckbox.type = 'checkbox';
            correctAnswerCheckbox.name = 'correct_answers[]';
            correctAnswerCheckbox.value = answersDiv.children.length;

            newAnswer.appendChild(answerInput);
            newAnswer.appendChild(correctAnswerCheckbox);
            newAnswer.appendChild(document.createTextNode(' Отметить как ответ'));

            answersDiv.appendChild(newAnswer);
        });
    });

    document.addEventListener("DOMContentLoaded", function() {
        var addSlideButton = document.querySelector('.add_slide');
        if (addSlideButton) {
            addSlideButton.addEventListener('click', function(event) {
                event.preventDefault();
                fetch('{{ route('slide.create', {'course': courseId}) }}')
                    .then(response => response.text())
                    .then(html => {
                        var modal = document.getElementById('myModal');
                        if (modal) {
                            var modalContent = modal.querySelector('.modal-content');
                            modalContent.innerHTML = html;
                            modal.style.display = 'block';

                            var closeButton = modal.querySelector('.close');
                            if (closeButton) {
                                closeButton.onclick = function() {
                                    modal.style.display = 'none';
                                }
                            }
                        } else {
                            console.error('Modal element not found');
                        }
                    })
                    .catch(error => console.error('Error:', error));
            });
        }
    });

    document.addEventListener('DOMContentLoaded', function() {
        const deleteButtons = document.querySelectorAll('.delete-media-button');

        deleteButtons.forEach(button => {
            button.addEventListener('click', function() {
                const mediaId = this.getAttribute('data-id');
                fetch('{{ url('/media/delete') }}/' + mediaId, {
                    method: 'DELETE',
                    headers: {
                        'X-CSRF-TOKEN': '{{ csrf_token() }}'
                    }
                }).then(response => {
                    if (response.ok) {
                        window.location.reload(); // ���������� �������� ��� ���������� ������ �����������
                    } else {
                        alert('��������� ������ ��� �������� �����������.');
                    }
                });
            });
        });
    });


    document.addEventListener('DOMContentLoaded', function () {
        var addButton = document.getElementById('addTextButton');
        var container = document.getElementById('textContainer');

        addButton.addEventListener('click', function () {
            var newTextArea = document.createElement('textarea');
            newTextArea.name = 'new_description[]';
            newTextArea.classList.add('additional-description');

            var newLabel = document.createElement('label');
            newLabel.textContent = 'Описание : ';

            var newDiv = document.createElement('div');
            newDiv.appendChild(newLabel);
            newDiv.appendChild(newTextArea);

            container.appendChild(newDiv);
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('addText').addEventListener('click', addTextField);
        document.getElementById('addImage').addEventListener('click', addImageField);
        document.getElementById('addVideo').addEventListener('click', addVideoField);
        document.getElementById('addQuiz').addEventListener('click', addQuizField);
    });

    document.addEventListener('DOMContentLoaded', function() {
        var deleteButtons = document.querySelectorAll('.delete-button');

        deleteButtons.forEach(function(button) {
            button.addEventListener('click', function() {
                var descriptionId = button.getAttribute('data-description-id');
                var deleteForm = document.querySelector('form[action*="' + descriptionId + '"]');
                if (deleteForm) {
                    deleteForm.submit();
                } else {
                    console.error('Delete form not found');
                }
            });
        });
    });

    function addTextField() {
        var container = document.getElementById('textContainer');
        var newTextArea = document.createElement('textarea');
        newTextArea.name = 'new_description[]';
        container.appendChild(newTextArea);
    }

    function addImageField() {
        var container = document.getElementById('textContainer');
        var newInput = document.createElement('input');
        newInput.type = 'file';
        newInput.name = 'new_image[]';
        newInput.accept = 'image/*';
        container.appendChild(newInput);
    }

    function addVideoField() {
    }

    function addQuizField() {
    }

    document.addEventListener('DOMContentLoaded', function () {
        var addSectionButton = document.getElementById('addSectionButton');
        var contentActions = document.getElementById('contentActions');

        addSectionButton.addEventListener('click', function () {
            contentActions.style.display = contentActions.style.display === 'none' ? 'block' : 'none';
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('addFileButton').addEventListener('click', function() {
            document.getElementById('fileUpload').click();
        });
    });

    function previewImage(input) {
        var file = input.files[0];
        var previewContainer = document.getElementById('filePreviewContainer');

        previewContainer.innerHTML = '';

        if (file) {
            var fileUrl = URL.createObjectURL(file);
            var fileName = file.name;
            var fileLink = document.createElement('a');
            fileLink.href = fileUrl;
            fileLink.download = fileName;
            fileLink.innerText = "Скачать " + fileName;

            if (file.type.startsWith('image/')) {
                var img = document.createElement('img');
                img.src = fileUrl;
                img.style.width = '40%';
                previewContainer.appendChild(img);
            } else if (file.type.startsWith('video/')) {
                var icon = document.createElement('i');
                icon.className = 'fa fa-file-video-o';
                previewContainer.appendChild(icon);
            } else if (file.type.startsWith('audio/')) {
                var icon = document.createElement('i');
                icon.className = 'fa fa-file-audio-o';
                previewContainer.appendChild(icon);
            } else {
                var icon = document.createElement('i');
                icon.className = 'fa fa-file';
                previewContainer.appendChild(icon);
            }

            previewContainer.appendChild(fileLink);
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        const answerButtons = document.querySelectorAll('.show-answer');
        answerButtons.forEach(button => {
            button.addEventListener('click', function () {
                const answers = this.parentNode.querySelectorAll('.answer');
                answers.forEach(answer => {
                    const isCorrect = answer.getAttribute('data-is-correct');
                    if (isCorrect === '1') {
                        answer.style.backgroundColor = 'lightgreen';
                    }
                });
            });
        });

        const additionalTestsButtons = document.querySelectorAll('.ai-generator');

        additionalTestsButtons.forEach(button => {
            button.addEventListener('click', function () {
                const incorrectQuestions = [];
                const form = document.getElementById('answerForm');

                form.querySelectorAll('.user-question').forEach(questionDiv => {
                    const questionText = questionDiv.querySelector('p').textContent.trim();
                    const wrongAnswers = questionDiv.querySelectorAll('.wrong-answer');
                    const selectedAnswers = [];

                    console.log('Вопрос:', questionText);

                    wrongAnswers.forEach(wrongAnswer => {
                        const checkbox = wrongAnswer.querySelector('input[type="checkbox"]');
                        const label = wrongAnswer.querySelector('label');
                        if (checkbox && label) {
                            const answerText = label.textContent.trim();
                            selectedAnswers.push(answerText);
                            console.log('Неправильный ответ найден:', answerText);
                        }
                    });

                    if (selectedAnswers.length > 0) {
                        incorrectQuestions.push({
                            question: questionText,
                            userAnswers: selectedAnswers
                        });
                    }
                });

                console.log('Вопросы с неправильными ответами для отправки на сервер:', incorrectQuestions);

                if (incorrectQuestions.length > 0) {
                    generateTest(incorrectQuestions);
                } else {
                    console.log('Нет вопросов с неправильными ответами.');
                }
            });
        });

        function generateTest(incorrectQuestions) {
            console.log('Отправка вопросов на сервер:', incorrectQuestions);
            fetch('/api/generate-tests', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                },
                body: JSON.stringify({ questions: incorrectQuestions })
            })
                .then(response => response.json())
                .then(data => {
                    console.log('Сгенерированные тесты:', data);
                    displayGeneratedTests(data.generated_tests);
                    alert('Тестовые задания успешно сгенерированы!');
                })
                .catch(error => console.error('Ошибка при генерации тестов:', error));
        }

        window.showCorrectAnswer = function(index) {
            const answers = document.querySelectorAll(`div[data-question-index="${index}"] .answer input[type="checkbox"]`);
            answers.forEach(answer => {
                const isCorrect = answer.getAttribute('data-is-correct') === 'true';
                answer.parentElement.classList.remove('correct-answer', 'wrong-answer');

                if (isCorrect) {
                    answer.parentElement.classList.add('correct-answer');
                } else {
                    answer.parentElement.classList.add('wrong-answer');
                }
            });
        };

        function displayGeneratedTests(tests) {
            console.log(tests);
            const generatedTestContainer = document.querySelector('.generated-test');
            generatedTestContainer.innerHTML = '';

            tests.forEach((test, index) => {
                const testElement = document.createElement('div');
                testElement.setAttribute('data-question-index', index);

                const questionText = test.match(/#\?(.*?)#\?/)[1].trim();
                const answers = test.split(/#\?/)[2].split(/#\$/).filter(answer => answer.trim()).map(answer => {
                    const isCorrect = /#\+|\+$|\+#+/.test(answer);
                    const answerText = answer.replace(/[#\+$]+/g, '').trim();
                    return { answerText, isCorrect: isCorrect };
                });

                const questionHTML = `<p>${questionText}</p>`;
                const answersHTML = answers.map((answer, i) => `
            <div class="answer">
                <input type="checkbox" id="generated-answer-${index}-${i}" data-is-correct="${answer.isCorrect}">
                <label for="generated-answer-${index}-${i}">${answer.answerText}</label>
            </div>
        `).join('');

                const showAnswerButton = `<button class="show-answer-btn" onclick="showCorrectAnswer(${index})">Показать правильный ответ</button>`;
                testElement.innerHTML = questionHTML + answersHTML + showAnswerButton;
                generatedTestContainer.appendChild(testElement);
            });
        }
    });
</script>
</html>